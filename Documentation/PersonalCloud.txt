=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "Pins1"     (component PinSettings)

Module "ETH"       (component Ethernet_LDD)
   - ETH_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable device"> is set to "yes" then 
                the device is also enabled (see the description of the <Enable> method). In this case the <Enable> method is 
                not necessary and need not to be generated. This method can be called only once. Before the second call of Init 
                the <Deinit> method must be called first.
   - ETH_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupt vectors, 
                etc.
   - ETH_SendFrame -Initiates a frame transmission. Frame contents are defined by the specified list of buffer descriptors. 
                Frames are internally queued. The end of the frame transmission is signalized by the OnFrameTransmitted event.
   - ETH_ReceiveFrame -Initiates frame receptions. Frame contents will be placed into buffers specified by the list of buffers. 
                Frames are internally queued. The end of a frame reception is signalized by the OnFrameReceived event.

Module "RED"       (component LED)
   - RED_Init -Performs the LED driver initialization.
   - RED_Deinit -Deinitializes the driver
   - RED_On -This turns the LED on.
   - RED_Off -This turns the LED off.
   - RED_Neg -This negates/toggles the LED
   - RED_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - RED_Put -Turns the LED on or off.
   - RED_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.

Module "GREEN"     (component LED)
   - GREEN_Init -Performs the LED driver initialization.
   - GREEN_Deinit -Deinitializes the driver
   - GREEN_On -This turns the LED on.
   - GREEN_Off -This turns the LED off.
   - GREEN_Neg -This negates/toggles the LED
   - GREEN_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - GREEN_Put -Turns the LED on or off.
   - GREEN_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.

Module "BLUE"      (component LED)
   - BLUE_Init -Performs the LED driver initialization.
   - BLUE_Deinit -Deinitializes the driver
   - BLUE_On -This turns the LED on.
   - BLUE_Off -This turns the LED off.
   - BLUE_Neg -This negates/toggles the LED
   - BLUE_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - BLUE_Put -Turns the LED on or off.
   - BLUE_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.

Module "USB"       (component USB_LDD)
   - USB_Init -Initializes USB device. Allocates memory for the device data structure, interrupts, pins, etc. This method 
                doesn't enable device pull-up. Use Enable() method to enable device pull-up.
   - USB_Enable -Enables the USB device (PHY, SIE). Enables device's DP(DM) pull-up.
   - USB_Disable -Disabled device's DP(DM) pull-up. Disables PHY, etc.
   - USB_HostGetPortState -Returns port <state>.
   - USB_HostSetPortState -This method sets root port (bus) states. Supported commands are:  [LDD_USB_HOST_PORT_CMD_POWER_OFF]  
                Deactivates VBUS enable signal and sets the port to the POWER_OFF state, closes all pipes and discards all 
                pending transfers.  [LDD_USB_HOST_PORT_CMD_POWER_ON]  Activates VBUS enable signal and sets the port to the 
                DISCONNECTED state.  Port must be in the POWERED_OFF state to be power on.  [LDD_USB_HOST_PORT_CMD_RESET]  Sets 
                the port to the RESETING state, starts the reset signaling and closes all pipes and discards all pending 
                transfers. As soon as the reset interval is elapsed the reset signaling will be stopped, the port state will be 
                change to the RESET_RECOVERING, and the reset recovery interval will begin. After the reset recovery interval 
                is elapsed, the port state will be changed to the ENABLED state. In the ENABLED state the port can used to 
                transfer data.  Device must be connected (ports state > DISCONNECTED) before reset can be started.  
                [LDD_USB_HOST_PORT_CMD_DISABLE]  Sets the port to the DISABLED state and closes all pipes and discards all 
                pending transfers. This state can be changed only by performing the bus reset(transfer to the ENABLED state), 
                by disconnecting the device (transfer to the DISCONNECT state) or by the powering-off the bus (transfer to the 
                POWERED_OFF state).  [LDD_USB_HOST_PORT_CMD_SUSPEND]  Suspends port (state = SUSPENDED). No transaction should 
                be pending before this method is called.  Port must be in the LDD_USB_HOST_PORT_ENABLED state to be suspend.  
                [LDD_USB_HOST_PORT_CMD_RESUME]  Sets the port to the RESUMING state and starts the resume signaling. After the 
                resume interval is elapsed, the port state will be changed to the ENABLED state. In the ENABLED state the port 
                can used to transfer data.  Port must be in the LDD_USB_HOST_PORT_RESUME_READY state before resume can start.
   - USB_HostOpenPipe -Initializes pipe according to the values in the endpoint descriptor and in the flags parameter. Allocate 
                bandwidth for periodic transfer types.
   - USB_HostClosePipe -Deinitializes EP and disables it in the HW. For control EP both directions are deinitialized. All 
                pending transfers are aborted and callback functions are called, if enabled.
   - USB_HostSendSetup -This method prepares control transfer. All transfer phases are handled by this method.   Note: On some 
                MCUs (e.g. Kinetis) must be the address of the data buffer 4 bytes aligned.
   - USB_HostSendData -This method prepares data to be sent to the device.   Note: On some MCUs (e.g. Kinetis) must be the 
                address of the data buffer 4 bytes aligned.
   - USB_HostRecvData -This method prepares buffer for data sent by the device.   Note: On some MCUs (e.g. Kinetis) must be the 
                address of the data buffer 4 bytes aligned.
   - USB_HostCancelTransfer -This method cancels all pending transfer requests in the given EP queue. Callback function is 
                called ( if enabled) for each cancelled transfer request.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "Cpu"       (component MK64FN1M0LQ12)

===================================================================================
